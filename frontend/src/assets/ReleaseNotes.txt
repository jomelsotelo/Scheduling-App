RELEASE NOTES

Team Name: SWARM CRUNCHERS

Members: BACKEND : JOMEL SOTELO, JOSE VASQUEZ, ANGEL RAMIREZ-GARCIA 
	 FRONTEND: KATY CHAN, JENICA CHU , HECTOR YABES

Product Name:
JoinIn

Date of release:
12-13-23

Overview:
???

Purpose:
Our scheduling app helps you manage your time efficiently by providing a user-friendly platform for creating and organizing your schedule. Whether you're a student, professional, or anyone looking to stay organized, our app has you covered.

Feature summery:
Create meeting -
Edit user info - 
Delete user account -
Delete all notifications -

Issue summery:
???

Steps to reproduce:
???

End-user impact:
???

Installation:
???

REST API endpoints:

auth.js
	POST /register
	POST /login

availability.js
	POST /:id/availability
	GET  /:id/availability/:id
	PUT /:id/availability/:id
	DEL /:id/availability/:id

extra.js
	POST /invite
	GET /notifications/:user_id
	DEL /notifications/:notification_id

meeting.js
	POST /
	GET /:id
	GET /
	PUT /:id
	DELETE /:id

timeslots.js
	GET /

users.js
	POST /
	GET /:id
	GET /
	PUT /:id
	DEL /:id

Disclaimer:
???

Contact:

BACKEND:
JOMEL SOTELO - jomelsotelo@csus.edu
JOSE VASQUEZ - 
ANGEL RAMIREZ-GARCIA - 

FRONTEND:
KATY CHAN - kchan5@csus.edu
JENICA CHU - jenicachu@csus.edu
HECTOR YABES - hyabes@csus.edu

REST API DOCUMENTS
-every api w/ examples
-all method interactions (GET, POST, PUT, DEL)
-all query parameters
-all expected outputs
-all error cases

auth.js
	POST /register
	POST /login

availability.js
	POST /:id/availability
	GET  /:id/availability/:id
	PUT /:id/availability/:id
	DEL /:id/availability/:id

extra.js
	POST /invite
	GET /notifications/:user_id
		
		[
			{
				"notifications_id": 108,
				"type": "update_notification",
				"entityId": 2,
				"content": "Sorry!",
				"user_id": 1,
				"timestamp": "2023-12-05T20:13:44.000Z"
			},
			{
				"notifications_id": 109,
				"type": "message_notification",
				"entityId": 1,
				"content": "Need to talk!",
				"user_id": 1,
				"timestamp": "2023-12-05T20:13:44.000Z"
			}
		]

		notification_id - order of notifcation created, used when deleting notifcation
		type - only two types of notifcations at the moment, message_notifcation & update_notification
		entityId - 1=message_notification 2=update_notification
		content - the actual message
		user_id - who the message was sent too
		timestamp - time message was created

		return 200 - OK
	
	DEL /notifications/:notification_id

		/notifications/108

		return 204 - No content

meeting.js
	POST /
	GET /:id
	GET /
	PUT /:id
	DELETE /:id

timeslots.js
	GET /

users.js
	POST /
	GET /:id
	GET /
	PUT /:id
	DEL /:id






